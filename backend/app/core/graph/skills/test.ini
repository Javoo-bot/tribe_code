# Create an Agent that Stores Information and Creates Templates

## Objective
Develop an agent that merges client data with templates to generate the final legal document and delivers it.

## Implementation Steps

### Template Storage

  - [x] Store templates in formats like `.txt` or `.docx` or `.json` 
  - [x] Define a clear placeholder Syntax
  - [x] Create a mock Define a clear placeholder Syntax
  - [x] Upload the files to the project to test them in local

### Agent Functionality

  - [x] Read file from  the localpath
  - [x] Read the client information file
  - [x] Use `re` library to find all the markers 
  - [x] Replace all the markers in a new file called 'schema'
  - [x] Create a new file

### LLM Entity Extraction

  - [] Define system prompts to instruct the LLM

     - [x] Define Clear data scheme with pydantic
     - [x] Create a data extraction function
     - [x] Create a Tool
     - [x] Configure Azure on Langchain
     - [x] Start agents with tools
     - [x] Process the input file 
     - [x] Generate the output file

  - [] Use LLM responses to fill in the predefined categories 
      - [] Validate the output
      - [] Check expected output format, type, and range.
      - [] Define success criteria (e.g., accuracy, precision, etc.).
      - [] Design positive, negative, and edge case test inputs.
      - [] Ensure data format matches real-world scenarios.
      - [] Match model output with expected results for each test case.
      - [] Document discrepancies and analyze failure patterns.
   
### Data Insertion

  - [] Replace placeholders in the template using the extracted data 
  - [] Ensure all placeholders are correctly replaced 
  - [] Perform validation checks to confirm all fields are filled in.

### Document Generation

- [ ] Combine the template with the inserted client data to create a complete legal document.
- [ ] Save the final document in the required format (e.g., `.pdf`, `.docx`).
- [ ] Use a library like `pdfkit` or `WeasyPrint` for generating PDFs, if necessary.
#### Example Libraries:
- **Python**: `string.Template`, `Jinja2`

### Simplifications
- **No Database**: Templates are stored locally, so no database is needed.
- **Version Control**: Use manual version control (e.g., file backups) during initial development.


